<!DOCTYPE html>
<html lang="ja">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<script src="/js/three.min.js"></script>
	<script src="/js/stats.min.js"></script>
	<script src="/js/TrackballControls.js"></script>
	<script src="/js/Detector.js"></script>
	<script src="/js/Projector.js"></script>
	<script src="../pet_talk.js"></script>
	<script src="/js/position.js"></script>
	<script src="/js/jquery-1.11.3.min.js"></script>
	<script src="/js/jquery.balloon.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	<script src="https://www.google.com/jsapi" type="text/javascript"></script>

	<title>ホーム</title>
	<style>
		body {
			font-family: "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", "メイリオ", Meiryo, sans-serif;
			background-color: #f0f0f0;
			margin: 0px;
			overflow: hidden;
		}
		#status {
			position: absolute;
			top: 100px;
			left: 10px;
			width: 30%;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0.8;
		}
		#status p {
			font-size: 1.2em;
		}
		#status ul {
			padding: 0;
		}
		#status ul li {
			list-style-type: none;
			margin: 5px;
		}
		#pet_talk {
			position: absolute;
			top:100px;
			right:10px;
			text-align: center;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0.8;
			border-radius: 10px;
		}
		#pet_remark {
			margin:0.5em 0 0 0;
			padding:0px;
		}
		#pet_baloon {
			position: absolute;
			top:120px;
			right:450px;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0;
			border-radius: 10px;
		}
		#cse {
			margin:0;
			padding: 0;
		    width:15em;
		    height:15em;
		    overflow:scroll;
	    }
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (1) 変わってます  ここから  !!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
	    .gsc-search-button {
			cursor: pointer;
			cursor: hand;	    	
	    }
	    .gsc-control-cse .gsc-control-cse-ja{
	    	margin:0;
	    	padding: 0;
	    }
	    
	    .gsc-above-wrapper-area {
	    	height:1em;
	    }
	    .gsc-result-info-container .gsc-result-info{
	    	padding: 0 0 1em 0;	    	
	    	margin: 0;
	    }
	    /*
	    .gsc-result-info {
	    	padding:3em 0 0 0;
	    }*/
		#auto_search {		
			position: absolute;
			top:410px;
			right:10px;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0.8;
			border-radius: 10px;
		}
    	
	    #auto_cse {
	    	margin:0;
			padding: 0;
		    width:15em;
		    height:14em;	      
		    overflow:scroll;
	    }

	    #auto_cse .gsc-search-box {
	    		
			display:none;
	    }
	    #stop_auto {
	    	position: absolute;
			right:10px;
			cursor: pointer;
			cursor: hand;
	    }
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (1) 変わってます  ここまで  !!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
	    	    
	</style>
</head>
<body>
	<!-- ステータス画面 -->
	<div id="status">

		<p>ペットのステータス</p>
		<ul>
			<li>ペットの名前: <%= petname %></li>
			<li>機嫌: <%= mood %></li>
			<li>満腹度: <%= hungry %></li>
		</ul>
		
		<p>ユーザー情報</p>
		<ul>
			<li id="userid" style="display:none"><%= userid %></li>
			<li>ユーザー名: <%= username %></li>
			<li>検索ワード: <span id="search_word"></span></li>
			<li>現在地: <span id="present_location"></span></li>
		</ul>
		<p><a href="/logout">ログアウト</a></p>
		<p><a href="/setting">アカウント設定</a></p>
	</div>

	<!-- ペットの会話用ふきだし -->
	<div id= "pet_baloon"></div>
	

	<div id="pet_talk">
		<p id="pet_remark">何について調べますか？</p>
			<div id="cse">
			  <script>
			  (function () {
			    var cx = '013236806639015361436:jiaaode1dms';
			    var gcse = document.createElement('script');
			    gcse.type = 'text/javascript';
			    gcse.async = true;
			    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
			        '//cse.google.com/cse.js?cx=' + cx;
			    var s = document.getElementsByTagName('script')[0];
			    s.parentNode.insertBefore(gcse, s);
			  })();
			  </script>
			  <gcse:search></gcse:search>
			</div>
		
  	</div>
  	<!--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (2) 変わってます  ここから  !!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->
  	<div id="auto_search">
  		<span id="auto_word" style="text-align: center"></span><input id="stop_auto" type='button' value='停止' onclick='stopAuto()'/>
	  	<div id="auto_cse">
				  <script>
				  (function () {
				    var cx = '013236806639015361436:jiaaode1dms';
				    var gcse = document.createElement('script');
				    gcse.type = 'text/javascript';
				    gcse.async = true;
				    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
				        '//cse.google.com/cse.js?cx=' + cx;
				    var s = document.getElementsByTagName('script')[0];
				    s.parentNode.insertBefore(gcse, s);
				  })();
				  </script>
				  <gcse:search></gcse:search>
		</div>
	</div>
 	<!--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (2) 変わってます  ここまで  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!-->
	<script>

	// Load the Search API
	google.load('search', '1');

	    // Set a callback to load the Custom Search Element when you page loads
	    var customSearchControl;
	    google.setOnLoadCallback(
	    	function(){
	    		customSearchControl = new google.search.CustomSearchControl('013236806639015361436:jiaaode1dms');

		        // Use "mysite_" as a unique ID to override the default rendering.
		        google.search.Csedr.addOverride("mysite_");

		        // Draw the Custom Search Control in the div named "CSE"
		        customSearchControl.draw('cse');

		        // Execute an initial search
		        customSearchControl.execute();
	    	},true);
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (3) 変わってます  ここから  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

	    var customSearchControl_auto;
	    google.setOnLoadCallback(
	    	function(){
	    		customSearchControl_auto = new google.search.CustomSearchControl('013236806639015361436:jiaaode1dms');

		        // Use "mysite_" as a unique ID to override the default rendering.
		        google.search.Csedr.addOverride("mysite_");

		        // Draw the Custom Search Control in the div named "CSE"
		        customSearchControl_auto.draw('auto_cse');

		        // Execute an initial search
		        customSearchControl_auto.execute();
	    	},true);
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (3) 変わってます  ここまで  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

	// WebGL未サポートブラウザへの対応
if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

var container, stats;
var camera, scene, projector, renderer;
var mesh, animation;
var KEY_CODE = {
	UP: 38,
	DOWN: 40,
	LEFT: 37,
	RIGHT: 39
};
var mouseXY =[0,0];

	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (4) 変わってます  ここから  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

var prev_search_time = Date.now();
var searchTimeSpan = 5000;
window.addEventListener("load", function () {
		//検索でEnter
	$("#gsc-i-id1").keyup(function(event){
		if(event.keyCode == 13){			
		    message_balloon($("#gsc-i-id1")[0].value + "！");
		    onSearch();
		    
	    }
	});
		//検索ボタン
	$(".gsc-search-button").click(function (){		
		message_balloon($("#gsc-i-id1")[0].value + "！");
		onSearch();
        
	});
	console.log("onload");
	socket.emit("pull_word",$("#userid")[0].innerHTML);
	setInterval("AutoSearch()",1000);
});

	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (4) 変わってます  ここまで  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/



init();
animate();
startListen();

var socket = io.connect('http://localhost:3000');

function init() {
	container = document.createElement( 'div' );
	document.body.appendChild( container );

	// サーバーサイドのsocket.IOに接続する
    // 接続出来たら、サーバー側のコンソールにconnected!と表示される
    
	// カメラ
	camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 2000 );
	camera.position.set(0,200,600);

	// カメラ追従
	camera.target = new THREE.Vector3( 0, 150, 0 );

	//
	
	scene = new THREE.Scene();
	scene.fog = new THREE.FogExp2( 0x00b9ef, 0.0008 );

	//
	
	// マウスのトラックボールのコントロール
	
	controls = new THREE.TrackballControls( camera );
	
	controls.rotateSpeed = 1.0;
	controls.zoomSpeed = 1.2;
	controls.panSpeed = 0.8;

	controls.noZoom = false;
	controls.noPan = false;
	
	controls.minDistance = 200;
	controls.maxDistance = 1000;
	
	controls.target = new THREE.Vector3(0, 100, 100);

	controls.staticMoving = true;
	controls.dynamicDampingFactor = 0.3;

	controls.keys = [ 65, 83, 68 ];

	controls.addEventListener( 'change', render );
	
	//

	// ライト

	scene.add( new THREE.AmbientLight( 0x777777 ) );

	var light = new THREE.DirectionalLight( 0xffefef, 2 );
	light.position.set(200,250,500);
	light.castShadow = true;
	light.shadowMapWidth = 1024;
	light.shadowMapHeight = 1024;
	light.shadowMapDarkness = 0.95;
	//light.shadowCameraVisible = true;

	scene.add( light );

	//
	
	
	// ペットモデルの読み込み
	var loader = new THREE.JSONLoader( true );
	loader.load( "/model_json/animal1.json", function( geometry ) {
		var texture = THREE.ImageUtils.loadTexture( '/img/bear_body2.jpg' );
		texture.anisotropy = renderer.getMaxAnisotropy();
		mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true, map: texture} ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true } ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060} ) );
		mesh.scale.set( 20, 20, 20 );
		mesh.castShadow = true;
		scene.add( mesh );
		animation = new THREE.MorphAnimation( mesh );
		animation.play();

	} );
	

	//

	// 地面表示
	var gt = THREE.ImageUtils.loadTexture( "img/grasslight-big.jpg" );
	var gg = new THREE.PlaneBufferGeometry( 3000, 3000 );
	var gm = new THREE.MeshPhongMaterial( { color: 0xffffff, map: gt } );

	var ground = new THREE.Mesh( gg, gm );
	ground.rotation.x = - Math.PI / 2;
	ground.material.map.repeat.set( 8, 8 );
	ground.material.map.wrapS = ground.material.map.wrapT = THREE.RepeatWrapping;
	ground.receiveShadow = true;

	scene.add( ground );

	//

	// 座標軸表示
	var axis = new THREE.AxisHelper(1000);
	axis.position.set(0,0,0);
	scene.add(axis);

	//

	// レンダリング
	renderer = new THREE.WebGLRenderer();
	renderer.shadowMapEnabled = true;
	renderer.setClearColor( 0x00b9ef );
	renderer.setPixelRatio( window.devicePixelRatio );
	renderer.setSize( window.innerWidth, window.innerHeight );
	container.appendChild(renderer.domElement);

	//

	// FPS表示
	stats = new Stats();
	stats.domElement.style.position = 'absolute';
	stats.domElement.style.top = '0px';
	container.appendChild( stats.domElement );

	//
			//検索でEnter


	window.addEventListener( 'resize', onWindowResize, false );

}

function onWindowResize() {

	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();

	controls.handleResize();

	renderer.setSize( window.innerWidth, window.innerHeight );

}

//
function animate() {

	requestAnimationFrame( animate );

	render();
	stats.update();
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (5) 変わってます  ここから  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/


	if(!checkMouseOnElement(mouseXY,"cse") && !checkMouseOnElement(mouseXY,"auto_cse")) {
		controls.enabled = true;
		controls.update();
	}else {
		controls.enabled = false;
		//message_balloon("てすと！");
	}
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (5) 変わってます  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

	//console.log("anim");
}

function onSearch() {
	var word = $("#gsc-i-id1")[0].value;
	var id = $("#userid")[0].innerHTML;
	prev_search_time = Date.now();
	socket.emit("send_word",word,id);
}

var radius = 600;

	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (6) 変わってます  ここから  !!!!!!!!!!
		prevTimeの初期化とちょっとしたアニメーションパターンの変化だけ
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/


var prevTime = Date.now();

var rand = 0;
function rand01() {
	rand = Math.floor(3*Math.random());//0,1,2
	//console.log(rand);
	//clearTimeout();
}		
setInterval("rand01()",3000);

function render() {

	//camera.lookAt( camera.target );
	
	if ( animation ) {

		var time = Date.now();

		animation.update( time - prevTime );

		prevTime = time;
		/*
		var max = 96;
		var min = max * (-1);
		var rotate = 24;
		if((mesh.rotation.y % (Math.PI * 2)) < 0.0000000000001 || Math.abs((mesh.rotation.y % (Math.PI * 2)) - (Math.PI * 2)) < 0.0000000000001) {
			mesh.position.z++;
			if(mesh.rotation.y != 0) mesh.rotation.y = 0;
		} else if(Math.abs(((mesh.rotation.y % (Math.PI * 2)) - Math.PI)) < 0.0000000000001) {
			mesh.position.z--;
			if(mesh.rotation.y != Math.PI) mesh.rotation.y = Math.PI;
		}
		if(mesh.position.z == max || mesh.position.z == min) {
			mesh.rotation.y += Math.PI / rotate;
		}
		*/
		
		if(mesh.rotation.y < (Math.PI * 2)) {

			if(rand == 0) mesh.rotation.y += 0.01;
			else if(rand == 1) mesh.rotation.y -= 0.01;
			else {}
		}else {
			mesh.rotation.y=0;
		}
		mesh.position.x += Math.sin(mesh.rotation.y);
		mesh.position.z += Math.cos(mesh.rotation.y);
		
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (6) 変わってます  ここまで  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
	

	}

	renderer.render( scene, camera );

}

	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (7) 変わってます  ここから  !!!!!!!!!!
		変更はただ変数にしていじりやすくしただけです!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/


// キーボードのキーが押された時
var mov_distance = 3;//変更はただ変数にしていじりやすくしただけです!!!
document.onkeydown = function (e) {
	var key = e.keyCode;
	//console.log(key);
	// 十字キー
	switch(e.which){

	    case KEY_CODE.RIGHT:
	     camera.position.x += mov_distance;
	     controls.target.x += mov_distance;	     
	     render();
	     break;
	     
	    case KEY_CODE.LEFT:
	     camera.position.x -= mov_distance;
	     controls.target.x -= mov_distance;
	     render();
	     break;
	      
	    case KEY_CODE.UP:
	     camera.position.z -= mov_distance;
	     controls.target.z -= mov_distance;
	     render();
	     break;
	      
	    case KEY_CODE.DOWN:
	     camera.position.z += mov_distance;
	     controls.target.z += mov_distance;
	     render();
	     break;
	 }

}
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (7) 変わってます  ここまで  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/



function MouseMove00Func(e){

	// スクロール位置を取得
	var scroll_pos = DocumentGetScrollPosition(document);
	
	mouseXY = [e.clientX + scroll_pos.x,e.clientY + scroll_pos.y];
	//console.log(checkMouseOnElement(mouseXY,"cse"));
}

// イベントのリッスンを開始する
function startListen() {

	if(document.addEventListener){

		// マウスを移動するたびに実行されるイベント
		document.addEventListener("mousemove" , MouseMove00Func);
		//serch_form.addEventListener("keydown" , serched);
	// アタッチイベントに対応している
	}else if(document.attachEvent){

		// マウスを移動するたびに実行されるイベント
		document.attachEvent("onmousemove" , MouseMove00Func);	
	}

}
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (8)終 変わってます  ここから  !!!!!!!!!!
		ここが結構function追加とかあります
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/


var timeOutId_b2 = 0;
function message_balloon(str) {
		console.log("mes");
		timeOutId_b2 = clearTimeout();
		b_2();
		$("#pet_baloon").showBalloon({
			contents: str,
			//"<br /><br /><input type='button' value='閉じる' onclick='b_2()'/>",
			position: "right",
			offsetX: 0,
			offsetY: 0,
			tipSize: 20,
			css: {
				border: "solid 5px #000",
				color: "#000",
				fontWeight: "bold",
				fontSize: "12px",
				background: "url(https://lh5.googleusercontent.com/-vTfpmoECckg/T0odv9K_VbI/AAAAAAAAE4w/Mv9xb2tGomo/s200/_img.png) no-repeat",
				width: "100px",
				//height: "70px",
				borderRadius: "20px",
				opacity: "1",
				padding: "10px 20px 10px 20px",
				overflow:"auto"
			}
		});	
		timeOutId_b2 = setTimeout('b_2()',2000);	
}

function b_2( ) {
	try{$("#pet_baloon").hideBalloon();}catch(e){}
	console.log("b2");
}

var autoFlag = true;
function stopAuto() {
	autoFlag = !autoFlag;
	if(autoFlag) $("#stop_auto")[0].value = "停止";			
	else $("#stop_auto")[0].value = "再開";
}

function AutoSearch() {	
	if(autoFlag && (Date.now() - prev_search_time) > searchTimeSpan) {
		//customSearchControl.execute("auto");
		console.log("autoSearch");
		socket.emit("pull_word",$("#userid")[0].innerHTML);
		prev_search_time = Date.now();
	}
}
socket.on("post_word", function (word) {
	var sw = word + " とは"	
   	customSearchControl_auto.execute(sw);
   	$("#auto_word")[0].innerHTML = sw +"で検索中！"
   	message_balloon($("#gsc-i-id2")[0].value + " を自動で調べたよ！");
   	//setTimeout('b_2()',2000);
});
	    /*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		!!!! (8)終 変わってます  ここまで  !!!!!!!!!!
	    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/


</script>
</body>
</html>