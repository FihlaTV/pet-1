<!DOCTYPE html>
<html lang="ja">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.1/css/materialize.min.css">
	<script src="//code.jquery.com/jquery-1.11.3.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.1/js/materialize.min.js"></script>
	<script src="/js/three.min.js"></script>
	<script src="/js/stats.min.js"></script>
	<script src="/js/OrbitControls.js"></script>
	<script src="/js/Detector.js"></script>
	<script src="/js/Projector.js"></script>
	<script src="/js/position.js"></script>
	<script src="/js/jquery-1.11.3.min.js"></script>
	<script src="/js/jquery.balloon.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	<script src="/js/petMotion.js"></script>
	<script src="https://www.google.com/jsapi" type="text/javascript"></script>

	<title>ホーム</title>
	<style>
		body {
			font-family: "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", "メイリオ", Meiryo, sans-serif;
			background-color: #f0f0f0;
			margin: 0px;
			overflow: hidden;
		}
		#status_div {
			position: absolute;
			top: 100px;
			left: 10px;
			padding: 10px;
			opacity: 0.9;
			border-radius: 10px;
		}
		#searchbox_div {
			position: absolute;
			top:50px;
			right:10px;
			width: 200px;
			text-align: center;
			padding: 5px;
			background-color: #fff;
			opacity: 0.8;
			border-radius: 10px;
		}
		#pet_remark {
			margin:0.5em 0 0 0;
			padding:0px;
		}
		#pet_baloon {
			position: absolute;
			top:120px;
			right:450px;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0;
			border-radius: 10px;
		}
		#cse {
			margin:0;
			padding: 0;
		    width:15em;
		    height:15em;
		    overflow:scroll;
	    }
	    .gsc-search-button {
			cursor: pointer;
			cursor: hand;	    	
	    }
	    .gsc-control-cse .gsc-control-cse-ja{
	    	margin:0;
	    	padding: 0;
	    }
	    
	    .gsc-above-wrapper-area {
	    	height:1em;
	    }
	    .gsc-result-info-container .gsc-result-info{
	    	padding: 0 0 1em 0;	    	
	    	margin: 0;
	    }
		#auto_search {		
			position: absolute;
			top:410px;
			right:10px;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0.8;
			border-radius: 10px;
		}
    	
	    #auto_cse {
	    	margin:0;
			padding: 0;
		    width:15em;
		    height:14em;	      
		    overflow:scroll;
	    }

	    #auto_cse .gsc-search-box {
	    		
			display:none;
	    }
	    #stop_auto {
	    	position: absolute;
			right:10px;
			cursor: pointer;
			cursor: hand;
	    }
	    #chat_view {
	    	height:4em;
	    }
	    #chat_list {
	    	overflow:scroll;
	    	height:3em;
	    }
	    .show {	
	    	display:inline;    	
	    }
	    .hide {
	    	display: none;
	    }
	    	    
	</style>
</head>
<body>
	<!-- ステータス画面 -->
	<div class="row" id="status_div">
		<div class="col s12">
			<div class="card z-depth-5">
				<div class="card-content">
					<span class="card-title black-text">ペットのステータス</span>
					<ul>
						<li>ペットの名前: <%= petname %></li>
						<li>機嫌: <%= mood %></li>
						<li>満腹度: <span id="hungry"><%= hungry %></p></li>
					</ul>
					
					<span class="card-title black-text">ユーザー情報</span>
					<ul>
						<li id="userid" style="display:none"><%= userid %></li>
						<li>ユーザー名: <%= username %></li>
						<li>検索ワード: <span id="search_word"><%= history %></span></li>
						<li>現在地: <span id="present_location"></span></li>
					</ul>
					<span id="room_state">ルーム未作成</span>
					<input id="makeRoom" type='button' value='ルーム作成' onclick='makeRoom()'/><br>
					<span "join">ルームに入る</span>
					<input id="joinRoomID" class="submit_button" type="text"/>
					<input id="joinButton" type='button' value='ルーム加入' onclick='joinRoom()'/>
					<div id="chat_view" class="hide">
						<div id="chat_list"></div>
						<form>
							<input id="comment" type="text" value=""/>
							<input id="msg_submit" class="submit_button" type="submit" value="送信" />
						 </form>
					</div>
					<p><a href="/logout"><i class="fa fa-sign-out"></i>ログアウト</a></p>
					<p><a href="/setting"><i class="fa fa-cog"></i>アカウント設定</a></p>
					<br>
					<button class="btn-floating btn-large waves-effect waves-light orange" onclick="food()">えさ</button>
					
					<button class="btn-floating btn-large waves-effect waves-light " onclick="food()">ヘルプ</button>
				</div>
			</div>
		</div>
	</div>

	<!-- ペットの会話用ふきだし -->
	<div id= "pet_baloon"></div>
	
	<div id="searchbox_div" class="card z-depth-5">
		<p id="pet_remark">何について調べますか？</p>
		<div id="cse">
		  <script>
		  (function () {
		    var cx = '013236806639015361436:jiaaode1dms';
		    var gcse = document.createElement('script');
		    gcse.type = 'text/javascript';
		    gcse.async = true;
		    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
		        '//cse.google.com/cse.js?cx=' + cx;
		    var s = document.getElementsByTagName('script')[0];
		    s.parentNode.insertBefore(gcse, s);
		  })();
		  </script>
		  <gcse:search></gcse:search>
		</div>
  	</div>
  	<div id="auto_search">
  		<span id="auto_word" style="text-align: center"></span><input id="stop_auto" type='button' value='停止' onclick='stopAuto()'/>
	  	<div id="auto_cse">
				  <script>
				  (function () {
				    var cx = '013236806639015361436:jiaaode1dms';
				    var gcse = document.createElement('script');
				    gcse.type = 'text/javascript';
				    gcse.async = true;
				    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
				        '//cse.google.com/cse.js?cx=' + cx;
				    var s = document.getElementsByTagName('script')[0];
				    s.parentNode.insertBefore(gcse, s);
				  })();
				  </script>
				  <gcse:search></gcse:search>
		</div>
	</div>
	<script>

	// Load the Search API
	google.load('search', '1');

	    // Set a callback to load the Custom Search Element when you page loads
	    var customSearchControl;
	    google.setOnLoadCallback(
	    	function(){
	    		customSearchControl = new google.search.CustomSearchControl('013236806639015361436:jiaaode1dms');

		        // Use "mysite_" as a unique ID to override the default rendering.
		        google.search.Csedr.addOverride("mysite_");

		        // Draw the Custom Search Control in the div named "CSE"
		        customSearchControl.draw('cse');

		        // Execute an initial search
		        customSearchControl.execute();
	    	},true);

	    var customSearchControl_auto;
	    google.setOnLoadCallback(
	    	function(){
	    		customSearchControl_auto = new google.search.CustomSearchControl('013236806639015361436:jiaaode1dms');

		        // Use "mysite_" as a unique ID to override the default rendering.
		        google.search.Csedr.addOverride("mysite_");

		        // Draw the Custom Search Control in the div named "CSE"
		        customSearchControl_auto.draw('auto_cse');

		        // Execute an initial search
		        customSearchControl_auto.execute();
	    	},true);

	// WebGL未サポートブラウザへの対応
if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

var clock = new THREE.Clock(); //追加
var container, stats;
var camera, scene, projector, renderer;
var mesh = [];
var animation = [];
var model_id = "ID_1"; //モデル、テクスチャの判別
var model_num = 0;//ルームのモデルの数の判別
var connect_num;
var playbackConfig = {
		speed: 1.0,
		wireframe: false
	}; //いらないかもしれないが取ったら怖いので

var prevTime = [];
prevTime[0] = Date.now();

var KEY_CODE = {
	UP: 38,
	DOWN: 40,
	LEFT: 37,
	RIGHT: 39
};
var mouseXY =[0,0];

var socket = io.connect('http://localhost:3000');

var prev_search_time = Date.now();
var searchTimeSpan = 5000;


window.addEventListener("load", function () {
		//検索でEnter
		/*
	$("#gsc-i-id1").keyup(function(event){
		if(event.keyCode == 13){			
		    message_balloon($("#gsc-i-id1")[0].value + "！");
		    onSearch(); 
	    }
	});
*/
	$("#gsc-i-id1").on("click",function(){
		console.log("wordclick");
		if(!$("#gsc-i-id1").val() == "") {		
		    message_balloon($("#gsc-i-id1")[0].value + "！");
		    onSearch(); 
	    }
	});
		//検索ボタン
	$(".gsc-search-button").click(function (){		
		message_balloon($("#gsc-i-id1")[0].value + "！");
		onSearch();      
	});
	//socket.emit("pull_word",$("#userid")[0].innerHTML);
	setInterval("AutoSearch()",1000);

	/*
	$("#comment").keyup(function(event){		
		if(event.keyCode == 13){		
			console.log("ttt");
			sendMessage();
			event.preventDefault();
			return false;    
	    }
	});*/
	$("#msg_submit").on("click",function () {
		console.log("msgsub")
		if(!$("#comment").val() == "") {
			sendMessage();			
		}
		return false;
	});


	$("#comment").click(function(event){		
		if(event.keyCode == 13){		
			console.log("messs")	
			sendMessage();
			event.preventDefault();
			return false;    
	    }
	});
	$("#send").click(function(e) {
		console.log("meeee");
	    return e.preventDefault();
	});



});


init();
animate();
startListen();


function init() {
	container = document.createElement( 'div' );
	document.body.appendChild( container );

	// サーバーサイドのsocket.IOに接続する
    // 接続出来たら、サーバー側のコンソールにconnected!と表示される
    
	// カメラ
	camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 2000 );
	camera.position.set(0,200,600);

	// カメラ追従
	camera.target = new THREE.Vector3(0,100,0);

	//
	
	scene = new THREE.Scene();
	scene.fog = new THREE.FogExp2( 0x00b9ef, 0.0008 );

	//
	
	// マウスのトラックボールのコントロール
	
	controls = new THREE.OrbitControls( camera );
	
	controls.rotateSpeed = 1.0;
	controls.zoomSpeed = 1.2;
	controls.panSpeed = 0.8;

	controls.minPolarAngle = 0; //追加
	controls.maxPolarAngle = Math.PI / 2; //追加、これで地面方向の裏側は見えなくなる

	controls.noZoom = false;
	controls.noPan = false;
	
	controls.minDistance = 200;
	controls.maxDistance = 1000;
	
	controls.target = new THREE.Vector3(200,150,100);

	controls.staticMoving = true;
	controls.dynamicDampingFactor = 0.3;

	controls.keys = [ 65, 83, 68 ];

	controls.addEventListener( 'change', render );
	
	//

	// ライト

	scene.add( new THREE.AmbientLight( 0x777777 ) );

	var light = new THREE.DirectionalLight( 0xffefef, 3 );
	light.position.set(500,250,500);
	light.castShadow = true;
	light.shadowMapWidth = 1024;
	light.shadowMapHeight = 1024;
	light.shadowMapDarkness = 0.95;
	//light.shadowCameraVisible = true;

	scene.add( light );

	//
	
	
	// ペットモデルの読み込み

	/*var loader = new THREE.JSONLoader( true );
	loader.load( '<%= modelNo %>', function( geometry ) {
	var config = {
		baseUrl: "models/bear/",
		body: "standandwalk.json", //models/bear/standandwalk.json
		skins: [ "bear_body2.png" ] //models/bear/skins/テクスチャファイル(複数可)
	}; //モデル番号のとこがわからなかったので書き換えてません、すみません
	character = new THREE.petMotion();
	character.scale = 20;
	console.log(character);
	character.onLoadComplete = function() {
		setupAnimations( character );
	}
	character.loadParts( config );
	scene.add( character.root );
	/*
	modelReader("/model_json/ID_1/animal1.json","/img/ID_1/bear_body2.jpg",model_num);
	model_num++;
	
	modelReader("/model_json/ID_1/animal1.json","/img/ID_1/bear_body2.jpg",0);
	model_num++;
	/*
	var loader = new THREE.JSONLoader( true );
	loader.load( "/model_json/animal1.json", function( geometry ) {
		var texture = THREE.ImageUtils.loadTexture( '/img/bear_body2.jpg' );
		texture.anisotropy = renderer.getMaxAnisotropy();
		mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true, map: texture} ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true } ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060} ) );
		mesh.scale.set( 20, 20, 20 );
		mesh.castShadow = true;
		scene.add( mesh );
		animation = new THREE.MorphAnimation( mesh );
		animation.play();

	} );*/

	var config = {
		baseUrl: "models/",
		body: "<%= modelNo %>", //models/bear/standandwalk.json
		skins: [ "<%= modelSkin %>" ] //models/bear/skins/テクスチャファイル(複数可)
	}; //モデル番号のとこがわからなかったので書き換えてません、すみません
	character = new THREE.petMotion();
	character.scale = 20;
	console.log(character);
	character.onLoadComplete = function() {
		setupAnimations( character );
	}
	character.loadParts( config );
	scene.add( character.root );
	
	//

	// 地面表示
	var gt = THREE.ImageUtils.loadTexture( "img/grasslight-big.jpg" );
	var gg = new THREE.PlaneBufferGeometry( 4000, 4000 );
	var gm = new THREE.MeshPhongMaterial( { color: 0xffffff, map: gt } );

	var ground = new THREE.Mesh( gg, gm );
	ground.rotation.x = - Math.PI / 2;
	ground.material.map.repeat.set( 10, 10 );
	ground.material.map.wrapS = ground.material.map.wrapT = THREE.RepeatWrapping;
	ground.receiveShadow = true;

	scene.add( ground );

	//

	// 座標軸表示
	var axis = new THREE.AxisHelper(1000);
	axis.position.set(0,0,0);
	scene.add(axis);

	// 

	// レンダリング
	renderer = new THREE.WebGLRenderer();
	renderer.shadowMapEnabled = true;
	renderer.setClearColor( 0x00b9ef );
	renderer.setPixelRatio( window.devicePixelRatio );
	renderer.setSize( window.innerWidth, window.innerHeight );
	container.appendChild(renderer.domElement);

	//

	// FPS表示
	stats = new Stats();
	stats.domElement.style.position = 'absolute';
	stats.domElement.style.top = '0px';
	container.appendChild( stats.domElement );

	//
			//検索でEnter


	window.addEventListener( 'resize', onWindowResize, false );

}
function setupAnimations( character ) { //アニメーションを格納します

	var generateCallback = function( animationName ) {

		return function () { character.setAnimation( animationName ); };

	}

	var animations = character.meshBody.geometry.animations;
	//console.log(animations.walk);

	for ( var a in animations ) {

		playbackConfig[ a ] = generateCallback( a );

	}

}

// ペットモデルの読み込み
function modelReader(model,tex,num) {
	prevTime[num] = Date.now();
	var loader = new THREE.JSONLoader( true );
	loader.load( model, function( geometry ) {
		var texture = THREE.ImageUtils.loadTexture( tex );
		texture.anisotropy = renderer.getMaxAnisotropy();
		mesh[num] = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true, map: texture} ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true } ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060} ) );
		mesh[num].scale.set( 20, 20, 20 );
		mesh[num].castShadow = true;
		scene.add( mesh[num] );
		animation[num] = new THREE.MorphAnimation( mesh[num] );
		animation[num].play();
	} );
}/*
// ペットモデルの読み込み
function modelReader(model,tex,id) {
	var loader = new THREE.JSONLoader( true );
	loader.load( model, function( geometry ) {
		var texture = THREE.ImageUtils.loadTexture( tex );
		texture.anisotropy = renderer.getMaxAnisotropy();
		mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true, map: texture} ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true } ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060} ) );
		mesh.scale.set( 20, 20, 20 );
		mesh.castShadow = true;
		scene.add( mesh );
		animation = new THREE.MorphAnimation( mesh );
		animation.play();
	} );
}*/


function setupAnimations( character ) { //アニメーションを格納します

	var generateCallback = function( animationName ) {

		return function () { character.setAnimation( animationName ); };

	}

	var animations = character.meshBody.geometry.animations;
	//console.log(animations.walk);

	for ( var a in animations ) {

		playbackConfig[ a ] = generateCallback( a );

	}

}

function onWindowResize() {

	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();

	//controls.handleResize();

	renderer.setSize( window.innerWidth, window.innerHeight );

}

//
function animate() {
	var ua = window.navigator.userAgent.toLowerCase();
	if(ua.indexOf('firefox') != -1) {
		mozRequestAnimationFrame( animate );
	}else if(ua.indexOf('chrome') != -1) {
		requestAnimationFrame( animate );
	}else {
		requestAnimationFrame( animate );
	}

	render();

	//stats.update();


	if(!checkMouseOnElement(mouseXY,"cse") && 
		!checkMouseOnElement(mouseXY,"auto_cse") &&
		 !checkMouseOnElement(mouseXY,"status")) {
		controls.enabled = true;
		controls.update();
	}else {
		controls.enabled = false;
		//message_balloon("てすと！");
	}

	//console.log("anim");
}

function onSearch() {
	var word = $("#gsc-i-id1")[0].value;
	var id = $("#userid")[0].innerHTML;
	prev_search_time = Date.now();
	socket.emit("send_word",word,id);
}
var radius = 600;

var prevTime = Date.now();

/*var rand = 0;
function rand01() {
	rand = Math.floor(3*Math.random());//0,1,2
	//console.log(rand);
	//clearTimeout();
}*/
var rand1 = 0; //進む向き
var rand2 = 1; //立ち止まるか
function rand01() {
    rand1 = Math.floor(3 * Math.random());
    //console.log(rand1);
    //clearTimeout();
}
function rand02() { //追加
	rand2 = Math.floor(5 * Math.random());
	//console.log(rand2);
}
setInterval("rand01()",3000);
setInterval("rand02()",2000); //追加

/*
function render() {

	// カメラ追従
	
	//camera.position.set(character.root.position.x - 500, character.root.position.y + 200, character.root.position.z +  500);
	//camera.target = character.root.position;
	//camera.lookAt( camera.target );
	

	if ( character ) { //animation→character

		/*var time = Date.now();

		animation.update( time - prevTime );

		prevTime = time;*/

		//var delta = clock.getDelta();

		//character.update( delta );

		/*
		var max = 96;
		var min = max * (-1);
		var rotate = 24;
		if((mesh.rotation.y % (Math.PI * 2)) < 0.0000000000001 || Math.abs((mesh.rotation.y % (Math.PI * 2)) - (Math.PI * 2)) < 0.0000000000001) {
			mesh.position.z++;
			if(mesh.rotation.y != 0) mesh.rotation.y = 0;
		} else if(Math.abs(((mesh.rotation.y % (Math.PI * 2)) - Math.PI)) < 0.0000000000001) {
			mesh.position.z--;
			if(mesh.rotation.y != Math.PI) mesh.rotation.y = Math.PI;
		}
		if(mesh.position.z == max || mesh.position.z == min) {
			mesh.rotation.y += Math.PI / rotate;
		}
		*/
		
/*
		prevTime = time;
		
		if(mesh.rotation.y < (Math.PI * 2)) {

			if(rand == 0) mesh.rotation.y += 0.01;
			else if(rand == 1) mesh.rotation.y -= 0.01;
			else {}
		}else {
			mesh.rotation.y=0;
		}
		mesh.position.x += Math.sin(mesh.rotation.y);
		mesh.position.z += Math.cos(mesh.rotation.y);

		if(rand2 == 0) { //rand=0のとき立ち止まりモーションを立っているものにする
			if(character.activeAnimation == "walk") {
				character.setAnimation("stand");
			}
		mesh.position.z += Math.cos(mesh.rotation.y);		

	}
	renderer.render( scene, camera );
} 
*/
/*
function render() {
	//camera.lookAt( camera.target );

	if ( animation[0] ) {
		//console.log("rend0");
		var time = Date.now();

		animation[0].update( time - prevTime );

		prevTime = time;
		
		if(mesh[0].rotation.y < (Math.PI * 2)) {

			if(rand == 0) mesh[0].rotation.y += 0.01;
			else if(rand == 1) mesh[0].rotation.y -= 0.01;
			else {}
		}else {
			mesh[0].rotation.y=0;
		}
		mesh[0].position.x += Math.sin(mesh[0].rotation.y);
		mesh[0].position.z += Math.cos(mesh[0].rotation.y);		

	}
	if(Model_Emit_Flag) {
		//console.log("send_model_pos"+mesh[0].position+mesh[0].position.x);
		/*
		socket.json.emit("send_model",
		{"room" : joinedRoom, "name": $("#username")[0].innerHTML,"model_id":model_id});
		
		//socket.emit("get_connect_count",$("#userid")[0].innerHTML);
		/*socket.json.emit("send_model_pos",
		{"connect_num":connect_num, "position":mesh[0].position,"rotation":mesh[0].rotation});
		
		socket.json.emit("send_model_pos",
		{"room":joinedRoom,"connect_num":1, "position":mesh[0].position,"rotation":mesh[0].rotation.y});
		

		/*
		for(var i = 1;i < model_num;i++) {
			OtherModelRender(i,)
		
	}
	renderer.render( scene, camera );

}
*/

var Position_Fix_Flag = false;function simplifyRadian(rad) {
    if(rad > (Math.PI*2)) return simplifyRadian(rad - (Math.PI*2));
    else return rad;
}function render() {
    
    if ( character ) { //animation→character
        
        var delta = clock.getDelta();        character.update( delta );
        //中心からの二乗距離
        var far = Math.sqrt(Math.pow(character.root.position.x,2)+Math.pow(character.root.position.z,2));
        //符号        
        
        //console.log(sign);
        if(Position_Fix_Flag) {                character.root.rotation.y = simplifyRadian(character.root.rotation.y);            var direct;
            if(character.root.position.x >= 0 && character.root.position.z >= 0) {
                direct = (Math.acos(Math.abs(character.root.position.z)/far) + Math.PI);
                console.log("1,1");
            }else if(character.root.position.x < 0 && character.root.position.z >= 0) {
                direct = (Math.PI-1*Math.acos(Math.abs(character.root.position.z)/far));
                console.log("-1,1");
            }else if(character.root.position.x < 0 && character.root.position.z < 0) {                
                direct = (Math.acos(Math.abs(character.root.position.z)/far));
                console.log("-1,-1");
            }else if(character.root.position.x >= 0 && character.root.position.z < 0) {
                direct = (2*Math.PI-1*Math.acos(Math.abs(character.root.position.z)/far));
                console.log("1,-1");
            }else{}
            if(    Math.abs(simplifyRadian(direct) - character.root.rotation.y) > 0.1 ){
                
                character.root.rotation.y += 0.01;
                character.root.position.x += Math.sin(character.root.rotation.y);
                character.root.position.z += Math.cos(character.root.rotation.y);
                
            }else {
                console.log("inin");
                character.root.position.x += Math.sin(character.root.rotation.y);
                character.root.position.z += Math.cos(character.root.rotation.y);
                if(far < 320) {
                    console.log("out");
                    Position_Fix_Flag = false;                
                }
            }
            
        }
        else if(far > 350 && !Position_Fix_Flag) {
            console.log("in");
            Position_Fix_Flag = true;
            FixRoot = character.root.rotation.y;
            character.setAnimation("walk");
        }else if(rand2 == 0) { //rand=0のとき立ち止まりモーションを立っているものにする            
            if(character.activeAnimation == "walk") {
                character.setAnimation("stand");
            }
        } else {            if(character.activeAnimation == "stand") { //モーションを歩くものにする
                character.setAnimation("walk");
            }            if(character.root.rotation.y < (Math.PI * 2)) {
                if(rand1 == 0)
                    character.root.rotation.y += 0.01;
                   else if(rand1==1)
                       character.root.rotation.y -= 0.01;
                   else {}                   
            } else {
                character.root.rotation.y = 0;
            }            character.root.position.x += Math.sin(character.root.rotation.y);
            character.root.position.z += Math.cos(character.root.rotation.y);    
        }            }    renderer.render( scene, camera );} 

function OtherModelRender(num,position_x,position_z,rotation_y) {
	
	if ( animation[num] ) {
		//console.log("other"+position.x);
		var time = Date.now();
		animation[num].update( time - prevTime[num] );
		prevTime[num] = time;
		
		mesh[num].rotation.y = rotation_y;

		mesh[num].position.x = position_x
		mesh[num].position.z = position_z
		//console.log("mesh"+rotation_y +" "+mesh[num].rotation.y);
	}
	//renderer.render( scene, camera );
}

// キーボードのキーが押された時
var mov_distance = 3;//変更はただ変数にしていじりやすくしただけです!!!
document.onkeydown = function (e) {
	var key = e.keyCode;
	//console.log(key);
	// 十字キー
	switch(e.which){

	    case KEY_CODE.RIGHT:
	     camera.position.x += mov_distance;
	     controls.target.x += mov_distance;	     
	     render();
	     break;
	     
	    case KEY_CODE.LEFT:
	     camera.position.x -= mov_distance;
	     controls.target.x -= mov_distance;
	     render();
	     break;
	      
	    case KEY_CODE.UP:
	     camera.position.z -= mov_distance;
	     controls.target.z -= mov_distance;
	     render();
	     break;
	      
	    case KEY_CODE.DOWN:
	     camera.position.z += mov_distance;
	     controls.target.z += mov_distance;
	     render();
	     break;
	 }

}


function MouseMove00Func(e){

	// スクロール位置を取得
	var scroll_pos = DocumentGetScrollPosition(document);
	
	mouseXY = [e.clientX + scroll_pos.x,e.clientY + scroll_pos.y];
	//console.log(checkMouseOnElement(mouseXY,"cse"));
}

// イベントのリッスンを開始する
function startListen() {

	if(document.addEventListener){

		// マウスを移動するたびに実行されるイベント
		document.addEventListener("mousemove" , MouseMove00Func);
		//serch_form.addEventListener("keydown" , serched);
	// アタッチイベントに対応している
	}else if(document.attachEvent){

		// マウスを移動するたびに実行されるイベント
		document.attachEvent("onmousemove" , MouseMove00Func);	
	}

}

// えさボタンがおされたとき
function food() {
	var id = $("#userid")[0].innerHTML;
	socket.emit("food", id);
}

var timeOutId_b2 = 0;
function message_balloon(str) {
		timeOutId_b2 = clearTimeout();
		b_2();
		$("#pet_baloon").showBalloon({
			contents: str,
			//"<br /><br /><input type='button' value='閉じる' onclick='b_2()'/>",
			position: "right",
			offsetX: 0,
			offsetY: 0,
			tipSize: 20,
			css: {
				border: "solid 5px #000",
				color: "#000",
				fontWeight: "bold",
				fontSize: "12px",
				background: "url(https://lh5.googleusercontent.com/-vTfpmoECckg/T0odv9K_VbI/AAAAAAAAE4w/Mv9xb2tGomo/s200/_img.png) no-repeat",
				width: "100px",
				//height: "70px",
				borderRadius: "20px",
				opacity: "1",
				padding: "10px 20px 10px 20px",
				overflow:"auto"
			}
		});	
		timeOutId_b2 = setTimeout('b_2()',2000);	
}

function b_2( ) {
	try{$("#pet_baloon").hideBalloon();}catch(e){}
}

var autoFlag = true;
function stopAuto() {
	autoFlag = !autoFlag;
	if(autoFlag) $("#stop_auto")[0].value = "停止";			
	else $("#stop_auto")[0].value = "再開";
}

function AutoSearch() {	
	if(autoFlag && (Date.now() - prev_search_time) > searchTimeSpan) {
		//customSearchControl.execute("auto");
		socket.emit("pull_word",$("#userid")[0].innerHTML);
		prev_search_time = Date.now();
	}
}
var joinedRoom;
function makeRoom() {
	joinedRoom = $("#userid")[0].innerHTML;
	socket.json.emit('init', { 'room': joinedRoom, 'name': $("#username")[0].innerHTML});
	$("#room_state")[0].innerHTML = "ルーム作成完了 id:"+joinedRoom;
	$("#chat_view").removeClass("hide");
	$("#chat_view").addClass("show");

}
var Model_Emit_Flag = false;
function joinRoom() {
	joinedRoom = $("#joinRoomID").val();
	socket.json.emit("join", {"room":joinedRoom , "user":$("#userid")[0].innerHTML ,
		"name":$("#username")[0].innerHTML});
	Model_Emit_Flag = true;
	socket.json.emit("send_model",
		{"room" : joinedRoom, "name": $("#username")[0].innerHTML,"model_id":model_id});
	console.log(model_id);
}

socket.on("post_word", function (word) {
	var sw = word + " とは"	
   	customSearchControl_auto.execute(sw);
   	$("#auto_word")[0].innerHTML = sw +"で検索中！"
   	message_balloon($("#gsc-i-id2")[0].value + " を自動で調べたよ！");
   	//setTimeout('b_2()',2000);
});

// えさボタンを押したとき表示されている満腹度が増える
socket.on("update_hungry_by_button", function(hungry, remark) {
	console.log(hungry);
	$('#hungry')[0].innerHTML = (hungry).toString(10);
	message_balloon(remark);
})
socket.on("update_hungry", function(hungry){
	$('#hungry')[0].innerHTML = (hungry).toString(10);
})

socket.on('disconnect', function () {
	console.log('disconnected');
});

function sendMessage() {
	console.log($("#comment")[0].value);
	socket.json.emit("send_message",
		{"room" : joinedRoom, "name": $("#username")[0].innerHTML, "comment":$("#comment")[0].value});
	$("#comment")[0].value = "";
}

$("#msg_submit").on("click",function () {
        if(!$("#message").val() == "") {
          sendMessage();
        }
      });


socket.on("room_message",function (message){
	console.log("onroommes");
	$("#room_state")[0].innerHTML = "ルーム作成完了 id:"+joinedRoom;
	$("#chat_view").removeClass("hide");

	$("#chat_list").append("<div class='msg'>" + message + "</div>");
	var scrollHeight = document.getElementById("chat_list").scrollHeight;
	document.getElementById("chat_list").scrollTop = scrollHeight;
});
/*
socket.on("send_model",function(req) {
    	chat.to(req.room).emit("room_model",req.model_id);
    });

    socket.on("send_model_pos",function(req) {
    	chat.to(req.room).emit("room_model_pos",req);
    });
*/
socket.on("room_model",function(req) {
	console.log("on_room_model");
	Model_Emit_Flag = true;
	modelReader("/model_json/ID_1/animal1.json","/img/ID_1/bear_body2.jpg",1);
	model_num++;
});

socket.on("room_model_pos",function(req) {
	//OtherModelRender(req.connect_num,req.position,req.rotation);
	//console.log("rmp"+req.rotation+req.position.x+req.position.z);

	OtherModelRender(1,req.position.x,req.position.z,req.rotation);
});
socket.on("ret_connect_count",function(req) {
	connect_num = req;
});


</script>
</body>
</html>