<!DOCTYPE html>
<html lang="ja">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<script src="/js/three.min.js"></script>
	<script src="/js/stats.min.js"></script>
	<script src="/js/TrackballControls.js"></script>
	<script src="/js/Detector.js"></script>
	<script src="/js/Projector.js"></script>
	<script src="../pet_talk.js"></script>
	<script src="/js/position.js"></script>
	<script src="/js/jquery-1.11.3.min.js"></script>
	<script src="/js/jquery.balloon.js"></script>
	<script src="https://www.google.com/jsapi" type="text/javascript"></script>
	  <script type="text/javascript">
	    // Load the Search API
	    google.load('search', '1');

	    // Set a callback to load the Custom Search Element when you page loads
	    google.setOnLoadCallback(
	      function(){
	        var customSearchControl = new google.search.CustomSearchControl('013236806639015361436:jiaaode1dms');

	        // Use "mysite_" as a unique ID to override the default rendering.
	        google.search.Csedr.addOverride("mysite_");

	        // Draw the Custom Search Control in the div named "CSE"
	        customSearchControl.draw('cse');

	        // Execute an initial search
	        customSearchControl.execute();
	      },
	    true);
	  </script>
	<title>ホーム</title>
	<style>
		body {
			font-family: "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", "メイリオ", Meiryo, sans-serif;
			background-color: #f0f0f0;
			margin: 0px;
			overflow: hidden;
		}
		#status {
			position: absolute;
			top: 100px;
			left: 10px;
			width: 30%;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0.8;
		}
		#status p {
			font-size: 1.2em;
		}
		#status ul {
			padding: 0;
		}
		#status ul li {
			list-style-type: none;
			margin: 5px;
		}
		#pet_talk {
			position: absolute;
			top:100px;
			right:10px;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0.8;
			border-radius: 10px;
		}
		#pet_baloon {
			position: absolute;
			top:120px;
			right:450px;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0;
			border-radius: 10px;
		}
		#pet_talk {
			position: absolute;
			top:100px;
			right:10px;
			padding: 10px;
			border: 1px solid #000;
			background-color: #fff;
			opacity: 0.8;
			border-radius: 10px;
		}
    	
	    #cse {
	      width:15em;
	      height:10em;
	      z-index: 200;
	      overflow:scroll;
	    }
	    .gsc-control-cse {
			z-index: 200;
	    }
	    .gsc-control-cse-ja {
		z-index: 200;
	    }
	</style>
</head>
<body>
	<!-- ステータス画面 -->
	<div id="status">

		<p>ペットのステータス</p>
		<ul>
			<li>ペットの名前: <%= petname %></li>
			<li>機嫌: <%= mood %></li>
			<li>満腹度: <%= hungry %></li>
		</ul>
		
		<p>ユーザー情報</p>
		<ul>
			<li>ユーザー名: <%= username %></li>
			<li>検索ワード: <span id="search_word"></span></li>
			<li>現在地: <span id="present_location"></span></li>
		</ul>
		<p><a href="/logout">ログアウト</a></p>
		<p><a href="/setting">アカウント設定</a></p>
	</div>

	<!-- ペットの会話用ふきだし -->
	<div id= "pet_baloon"></div>
	

	<div id="pet_talk">
		<p id="pet_remark">何について調べますか？</p>
		<input type="submit" value="作成">
			<div id="cse">
			  <script>
			  (function c_search() {
			    var cx = '013236806639015361436:jiaaode1dms';
			    var gcse = document.createElement('script');
			    gcse.type = 'text/javascript';
			    gcse.async = true;
			    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
			        '//cse.google.com/cse.js?cx=' + cx;
			    var s = document.getElementsByTagName('script')[0];
			    s.parentNode.insertBefore(gcse, s);
			  })();
			  </script>
			  <gcse:search></gcse:search>
			</div>
		
  	</div>	

	<!--
	<div id="pet_talk">
		<p><%= remark %></p>
		<p id="r"></p>
		<div id="pet_search_box"><input type="text" name="pet_search_word" size="50" value=""><br><input type="submit" value="検索"></div>
	</div>
	-->
	<script>
	// WebGL未サポートブラウザへの対応
if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

var container, stats;
var camera, scene, projector, renderer;
var mesh, animation;
var KEY_CODE = {
	UP: 38,
	DOWN: 40,
	LEFT: 37,
	RIGHT: 39
};
var mouseXY =[0,0];
init();
animate();
startListen();

function init() {
	container = document.createElement( 'div' );
	document.body.appendChild( container );
	
	//
	
	// カメラ
	camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 2000 );
	camera.position.set(0,200,600);

	// カメラ追従
	camera.target = new THREE.Vector3( 0, 150, 0 );

	//
	
	scene = new THREE.Scene();
	scene.fog = new THREE.FogExp2( 0x00b9ef, 0.0008 );

	//
	
	// マウスのトラックボールのコントロール
	
	controls = new THREE.TrackballControls( camera );
	
	controls.rotateSpeed = 1.0;
	controls.zoomSpeed = 1.2;
	controls.panSpeed = 0.8;

	controls.noZoom = false;
	controls.noPan = false;
	
	controls.minDistance = 200;
	controls.maxDistance = 1000;
	
	controls.target = new THREE.Vector3(0, 100, 100);

	controls.staticMoving = true;
	controls.dynamicDampingFactor = 0.3;

	controls.keys = [ 65, 83, 68 ];

	controls.addEventListener( 'change', render );
	
	//

	// ライト

	scene.add( new THREE.AmbientLight( 0x777777 ) );

	var light = new THREE.DirectionalLight( 0xffefef, 2 );
	light.position.set(200,250,500);
	light.castShadow = true;
	light.shadowMapWidth = 1024;
	light.shadowMapHeight = 1024;
	light.shadowMapDarkness = 0.95;
	//light.shadowCameraVisible = true;

	scene.add( light );

	//
	
	
	// ペットモデルの読み込み
	var loader = new THREE.JSONLoader( true );
	loader.load( "/model_json/animal1.json", function( geometry ) {
		var texture = THREE.ImageUtils.loadTexture( '/img/bear_body2.jpg' );
		texture.anisotropy = renderer.getMaxAnisotropy();
		mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true, map: texture} ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060, morphTargets: true } ) );
		//mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0x606060} ) );
		mesh.scale.set( 20, 20, 20 );
		mesh.castShadow = true;
		scene.add( mesh );
		animation = new THREE.MorphAnimation( mesh );
		animation.play();

	} );
	

	//

	// 地面表示
	var gt = THREE.ImageUtils.loadTexture( "img/grasslight-big.jpg" );
	var gg = new THREE.PlaneBufferGeometry( 3000, 3000 );
	var gm = new THREE.MeshPhongMaterial( { color: 0xffffff, map: gt } );

	var ground = new THREE.Mesh( gg, gm );
	ground.rotation.x = - Math.PI / 2;
	ground.material.map.repeat.set( 8, 8 );
	ground.material.map.wrapS = ground.material.map.wrapT = THREE.RepeatWrapping;
	ground.receiveShadow = true;

	scene.add( ground );

	//

	// 座標軸表示
	var axis = new THREE.AxisHelper(1000);
	axis.position.set(0,0,0);
	scene.add(axis);

	//

	// レンダリング
	renderer = new THREE.WebGLRenderer();
	renderer.shadowMapEnabled = true;
	renderer.setClearColor( 0x00b9ef );
	renderer.setPixelRatio( window.devicePixelRatio );
	renderer.setSize( window.innerWidth, window.innerHeight );
	container.appendChild(renderer.domElement);

	//

	// FPS表示
	stats = new Stats();
	stats.domElement.style.position = 'absolute';
	stats.domElement.style.top = '0px';
	container.appendChild( stats.domElement );

	//
	window.addEventListener( 'resize', onWindowResize, false );

}

function onWindowResize() {

	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();

	controls.handleResize();

	renderer.setSize( window.innerWidth, window.innerHeight );

}

//
function animate() {

	requestAnimationFrame( animate );

	render();
	stats.update();
	
	/*
		if(timer_count == 0) {
			timer_start(1)
			$("#gsc-i-id1").keyup(function(event){
				if(event.keyCode == 13){
				    message_balloon($("#gsc-i-id1")[0].value + "！");
				    console.log("puuu1111");
			    }
			});
				//検索ボタン
			$(".gsc-search-button").click(function (){

				message_balloon($("#gsc-i-id1")[0].value + "");
				        console.log("puuu");
			});
		}
	*/


		//検索でEnter
	$("#gsc-i-id1").keyup(function(event){
		if(event.keyCode == 13){
		    message_balloon($("#gsc-i-id1")[0].value + "！");
		    setTimeout('b_2()',2000);		    
		    //console.log("puuu1111");
	    }
	});
		//検索ボタン
	$(".gsc-search-button").click(function (){

		message_balloon($("#gsc-i-id1")[0].value + "");
		       // console.log("puuu");
		        setTimeout('b_2',1000);
	});

	if(!checkMouseOnElement(mouseXY,"cse")) {
		controls.enabled = true;
		controls.update();
	}else {
		controls.enabled = false;
		//message_balloon("てすと！");
	}
	//console.log("anim");
}

function onSearch() {
	var input = $("#gsc-i-id1")[0].value;

}



/*
<input autocomplete="off" type="text" size="10" class=" gsc-input " name="search" title="検索" id="gsc-i-id1" dir="ltr" spellcheck="false" style="outline: none; background: rgb(255, 255, 255);">
<input type="button" value="検索" class="gsc-search-button" title="検索">
*/

var radius = 600;

var prevTime = Date.now();

function render() {

	//camera.lookAt( camera.target );

	if ( animation ) {

		var time = Date.now();

		animation.update( time - prevTime );

		prevTime = time;

	}

	renderer.render( scene, camera );

}

// キーボードのキーが押された時
document.onkeydown = function (e) {

	var key = e.keyCode;
	//console.log(key);

	// 十字キー
	switch(e.which){

	    case KEY_CODE.RIGHT:
	     camera.position.x += 3;
	     controls.target.x += 3;
	     render();
	     break;
	     
	    case KEY_CODE.LEFT:
	     camera.position.x -= 3;
	     controls.target.x -= 3;
	     render();
	     break;
	      
	    case KEY_CODE.UP:
	     camera.position.z -= 3;
	     controls.target.z -= 3;
	     render();
	     break;
	      
	    case KEY_CODE.DOWN:
	     camera.position.z += 3;
	     controls.target.z -= 3;
	     render();
	     break;
	 }

}


function MouseMove00Func(e){

	// スクロール位置を取得
	var scroll_pos = DocumentGetScrollPosition(document);
	
	mouseXY = [e.clientX + scroll_pos.x,e.clientY + scroll_pos.y];
	//console.log(checkMouseOnElement(mouseXY,"cse"));
}

// イベントのリッスンを開始する
function startListen() {
	if(document.addEventListener){

		// マウスを移動するたびに実行されるイベント
		document.addEventListener("mousemove" , MouseMove00Func);
		
	// アタッチイベントに対応している
	}else if(document.attachEvent){

		// マウスを移動するたびに実行されるイベント
		document.attachEvent("onmousemove" , MouseMove00Func);	
	}
}

function message_balloon(str) {
			$("#pet_baloon").showBalloon({
				contents: str+"<br /><br /><input type='button' value='閉じる' onclick='b_2()'/>",
				position: "right",
				offsetX: 0,
				offsetY: 0,
				tipSize: 20,
				css: {
					border: "solid 5px #000",
					color: "#000",
					fontWeight: "bold",
					fontSize: "20px",
					background: "url(https://lh5.googleusercontent.com/-vTfpmoECckg/T0odv9K_VbI/AAAAAAAAE4w/Mv9xb2tGomo/s200/_img.png) no-repeat",
					width: "100px",
					height: "70px",
					borderRadius: "20px",
					opacity: "1",
					padding: "10px 20px 10px 20px"
				}
			});
		}

function b_2( ) {
	try{$("#pet_baloon").hideBalloon();}catch(e){}
}

</script>
</body>
</html>